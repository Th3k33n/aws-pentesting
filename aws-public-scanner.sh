#!/bin/bash

print_help() {
  echo "This is a tool that scans an AWS account for publicly accessible resources."
  echo "Usage: $0 -p [AWS_PROFILE_NAME] -r [AWS_REGION] -s [SCAN_TYPE]"
  echo ""
  echo "SCAN_TYPE options:"
  echo "    s3  - Scan for publicly accessible S3 buckets"
  echo "    rds - Scan for publicly accessible RDS instances"
  echo "    ec2 - Scan for publicly accessible EC2 instances"
  echo "    all - Run all three scans"
}

while getopts ":p:r:s:h" opt; do
  case ${opt} in
    p )
      PROFILE=$OPTARG
      ;;
    r )
      REGION=$OPTARG
      ;;
    s )
      SCAN=$OPTARG
      ;;
    h )
      print_help
      exit 0
      ;;
    \? )
      echo "Invalid option: -$OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid option: -$OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done

if [ -z "$PROFILE" ] || [ -z "$REGION" ] || [ -z "$SCAN" ]; then
  echo "Error: -p [AWS_PROFILE_NAME], -r [AWS_REGION], and -s [SCAN_TYPE] must be specified"
  exit 1
fi

echo "-------------------------------"
echo "This is a tool that scans an AWS account for publicly accessible resources."
echo "AWS Profile: $PROFILE"
echo "AWS Region: $REGION"
echo "Scan Type: $SCAN"
echo "-------------------------------"

if [ "$SCAN" = "s3" ] || [ "$SCAN" = "all" ]; then
  echo "Running S3 scanner..."
  for BUCKET in $(aws s3api list-buckets --profile $PROFILE --region $REGION --query 'Buckets[].Name' --output text); do
    ACL=$(aws s3api get-bucket-acl --profile $PROFILE --region $REGION --bucket $BUCKET --query "Grants[?Grantee.URI=='http://acs.amazonaws.com/groups/global/AllUsers'].Permission" --output text)
    POLICY=$(aws s3api get-bucket-policy-status --profile $PROFILE --region $REGION --bucket $BUCKET --query "PolicyStatus.IsPublic" --output text)
    if [ "$ACL" = "READ" ] || [ "$POLICY" = "true" ]; then
      echo -e "\033[32mBucket $BUCKET is publicly accessible\033[0m"
      echo "$BUCKET" >> s3_buckets.txt
    else
      echo -e "\033[31mBucket $BUCKET is not publicly accessible\033[0m"
    fi
  done
fi

if [ "$SCAN" = "rds" ] || [ "$SCAN" = "all" ]; then
  echo "Running RDS scanner..."
  for INSTANCE in $(aws rds describe-db-instances --profile $PROFILE --region $REGION --query "DBInstances[].DBInstanceIdentifier" --output text); do
    if aws rds describe-db-instances --profile $PROFILE --region $REGION --db-instance-identifier $INSTANCE --query "DBInstances[].PubliclyAccessible" --output text | grep -q "True";
      then echo -e "\033[32mInstance $INSTANCE is publicly accessible\033[0m";
      echo "$INSTANCE" >> rds_instances.txt;
      ENDPOINT=$(aws rds describe-db-instances --profile $PROFILE --region $REGION --db-instance-identifier $INSTANCE --query "DBInstances[].Endpoint.Address" --output text)
      PORT=$(aws rds describe-db-instances --profile $PROFILE --region $REGION --db-instance-identifier $INSTANCE --query "DBInstances[].Endpoint.Port" --output text)
      echo "Endpoint Address: $ENDPOINT" | tee -a rds_instances.txt
      echo "Port: $PORT" | tee -a rds_instances.txt
    else
      echo -e "\033[32mInstance $INSTANCE is not publicly accessible\033[0m";
    fi
  done
fi
#!/bin/bash

# EC2 instance scanner

while getopts ":p:r:" opt; do
  case ${opt} in
    p )
      PROFILE=$OPTARG
      ;;
    r )
      REGION=$OPTARG
      ;;
    \? )
      echo "Invalid option: $OPTARG" 1>&2
      exit 1
      ;;
    : )
      echo "Invalid option: $OPTARG requires an argument" 1>&2
      exit 1
      ;;
  esac
done
shift $((OPTIND -1))

for INSTANCE in $(aws ec2 describe-instances --profile $PROFILE --region $REGION --query 'Reservations[].Instances[].InstanceId' --output text); do
  if aws ec2 describe-instances --profile $PROFILE --region $REGION --instance-ids $INSTANCE --query 'Reservations[].Instances[].State.Name' --output text | grep -q "running"; then
    if aws ec2 describe-instances --profile $PROFILE --region $REGION --instance-ids $INSTANCE --query 'Reservations[].Instances[].PublicIpAddress' --output text | grep -q '[0-9]'; then
      echo -e "\033[32mInstance $INSTANCE is running and has a public IP address\033[0m"
      echo "$INSTANCE" >> ec2_instances.txt
      PUBLIC_IP=$(aws ec2 describe-instances --profile $PROFILE --region $REGION --instance-ids $INSTANCE --query 'Reservations[].Instances[].PublicIpAddress' --output text)
      echo "Public IP: $PUBLIC_IP" | tee -a ec2_instances.txt
    fi
  fi
done
